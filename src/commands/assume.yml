description: |
  Configure, and assume role and store
  AWS credentials in
  ~/.aws/credentials and ~/.aws/config
parameters:
  aws-access-key-id:
    default: AWS_ACCESS_KEY_ID
    description: |
      AWS access key id for IAM role. Set this to the name of
      the environment variable you will use to hold this
      value, i.e. AWS_ACCESS_KEY.
    type: env_var_name
  aws-region:
    default: AWS_DEFAULT_REGION
    description: |
      Env var of AWS region to operate in
      (defaults to AWS_DEFAULT_REGION)
    type: env_var_name
  aws-secret-access-key:
    default: AWS_SECRET_ACCESS_KEY
    description: |
      AWS secret key for IAM role. Set this to the name of
      the environment variable you will use to hold this
      value, i.e. $AWS_SECRET_ACCESS_KEY.
    type: env_var_name
  configure-default-region:
    default: true
    description: |
      Some AWS actions don't require a region; set this to false if you do not want to store a default region in ~/.aws/config
    type: boolean
  configure-profile-region:
    default: true
    description: |
      Boolean whether to configure the region for the custom (non-default) profile or not
    type: boolean
  disable-aws-pager:
    default: true
    description: |
      Set to false to skip forceful disabling of all AWS CLI output paging.
    type: boolean
  override-installed:
    default: false
    description: |
      By default, if the AWS CLI is detected on the system, the install will be skipped.
      Enable this to override the installed version and install your specified version.
    type: boolean
  profile-name:
    default: default
    description: Profile name to be configured.
    type: string
  role-arn:
    default: ""
    description: Role ARN that the profile should take.
    type: string
  sts-role-arn:
    default: AWS_STS_ROLE_ARN
    description: |
      Role ARN to assume. Set this to the name of
      the environment variable you will use to hold this
      value, i.e. $AWS_STS_ROLE_ARN.
    type: env_var_name
  sts-role-session-name:
    default: CIRCLE_USERNAME
    description: |
      Role session name to be used.
      Default to $CIRCLE_USERNAME.
    type: env_var_name
  version:
    default: latest
    description: Select a specific version of the AWS v2 CLI. By default the latest version will be used.
    type: string
steps:
  - install:
      disable-aws-pager: <<parameters.disable-aws-pager>>
      override-installed: <<parameters.override-installed>>
      version: <<parameters.version>>
  - run:
      command: |-
        PARAM_AWS_CLI_ACCESS_KEY_ID=$(eval echo "\$$PARAM_AWS_CLI_ACCESS_KEY_ID")
        PARAM_AWS_CLI_SECRET_ACCESS_KEY=$(eval echo "\$$PARAM_AWS_CLI_SECRET_ACCESS_KEY")
        PARAM_AWS_CLI_REGION=$(eval echo "\$$PARAM_AWS_CLI_REGION")
        PARAM_AWS_CLI_STS_ROLE_ARN=$(eval echo "\$$PARAM_AWS_CLI_STS_ROLE_ARN")
        PARAM_AWS_CLI_STS_ROLE_SESSION_NAME=$(eval echo "\$$PARAM_AWS_CLI_STS_ROLE_SESSION_NAME")

        aws configure set aws_access_key_id \
            "$PARAM_AWS_CLI_ACCESS_KEY_ID" \
            --profile "$PARAM_AWS_CLI_PROFILE_NAME"
        aws configure set aws_secret_access_key \
            "$PARAM_AWS_CLI_SECRET_ACCESS_KEY" \
            --profile "$PARAM_AWS_CLI_PROFILE_NAME"

        if [ "$PARAM_AWS_CLI_CONFIG_DEFAULT_REGION" = "1" ]; then
            aws configure set default.region "$PARAM_AWS_CLI_REGION" \
                --profile "$PARAM_AWS_CLI_PROFILE_NAME"
        fi

        if [ "$PARAM_AWS_CLI_CONFIG_PROFILE_REGION" = "1" ]; then
            aws configure set region "$PARAM_AWS_CLI_REGION" \
                --profile "$PARAM_AWS_CLI_PROFILE_NAME"
        fi

        if [ -n "$PARAM_AWS_CLI_ROLE_ARN" ]; then
            aws configure set role_arn "$PARAM_AWS_CLI_ROLE_ARN" \
                --profile "$PARAM_AWS_CLI_PROFILE_NAME"
        fi

        temp_role=$(aws sts assume-role --role-arn "$PARAM_AWS_CLI_STS_ROLE_ARN" \
        --role-session-name "$PARAM_AWS_CLI_STS_ROLE_SESSION_NAME" --profile "$PARAM_AWS_CLI_PROFILE_NAME") && \

        aws configure set aws_access_key_id $(echo $temp_role | jq \
        .Credentials.AccessKeyId | xargs) --profile "$PARAM_AWS_CLI_PROFILE_NAME" && \

        aws configure set aws_secret_access_key $(echo $temp_role | jq \
        .Credentials.SecretAccessKey | xargs) --profile "$PARAM_AWS_CLI_PROFILE_NAME" && \

        aws configure set aws_session_token $(echo $temp_role | jq \
        .Credentials.SessionToken | xargs) --profile "$PARAM_AWS_CLI_PROFILE_NAME"
      environment:
        PARAM_AWS_CLI_ACCESS_KEY_ID: <<parameters.aws-access-key-id>>
        PARAM_AWS_CLI_CONFIG_DEFAULT_REGION: <<parameters.configure-default-region>>
        PARAM_AWS_CLI_CONFIG_PROFILE_REGION: <<parameters.configure-profile-region>>
        PARAM_AWS_CLI_PROFILE_NAME: <<parameters.profile-name>>
        PARAM_AWS_CLI_REGION: <<parameters.aws-region>>
        PARAM_AWS_CLI_ROLE_ARN: <<parameters.role-arn>>
        PARAM_AWS_CLI_SECRET_ACCESS_KEY: <<parameters.aws-secret-access-key>>
        PARAM_AWS_CLI_STS_ROLE_ARN: <<parameters.sts-role-arn>>
        PARAM_AWS_CLI_STS_ROLE_SESSION_NAME: <<parameters.sts-role-session-name>>
      name: Assume role
